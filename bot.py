import requests
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
import os

# üîπ –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7973682034:AAF1hOAXBuWX5ylEjhMcSmDDGeJhnFb26qs"
# üîπ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π Telegram ID, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤—ã
YOUR_TELEGRAM_ID = 978523669  

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
periodic_task = None
selected_date = "2025-03-09"  # –î–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# üîç –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–∞–π—Ç—É
async def get_bus_info():
    global selected_date
    places = {
        "Novogrudok": "c624785",
        "Minsk": "c625144"
    }

    url = f'https://atlasbus.by/api/search?from_id={places["Novogrudok"]}&to_id={places["Minsk"]}&calendar_width=30&date={selected_date}&passengers=1'
    response = requests.get(url)
    
    if response.status_code != 200:
        return None  

    data = response.json().get('rides', [])

    available_rides = [ride for ride in data if ride["freeSeats"] > 0]

    if not available_rides:
        return None  

    message = f"‚úÖ –ë–∏–ª–µ—Ç—ã –µ—Å—Ç—å –Ω–∞ {selected_date}\n\nüöå **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–π—Å—ã:**\n\n"

    for ride in available_rides:
        message += f"üöè *–ú–∞—Ä—à—Ä—É—Ç:* {ride['name']}\nüí∞ *–¶–µ–Ω–∞:* {ride['onlinePrice']} BYN\nüéü *–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç:* {ride['freeSeats']}\n"

        if ride['pickupStops']:
            stop = ride['pickupStops'][0]
            message += f"üö¶ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* {stop['datetime']}\nüìç *–ú–µ—Å—Ç–æ:* {stop['desc']}\n"

        message += "üöè *–ü—Ä–∏–±—ã—Ç–∏–µ:*\n"
        for stop in ride['dischargeStops']:
            message += f"   üïí {stop['datetime']} - üìç {stop['desc']}\n"

        message += "\n" + "#" * 30 + "\n\n"

    return message

# üì© –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: Message):
    if message.from_user.id == YOUR_TELEGRAM_ID:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /bus, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–π—Å–∞—Ö.\n"
                             "–ò—Å–ø–æ–ª—å–∑—É–π /setdate YYYY-MM-DD –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

# üìÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setdate YYYY-MM-DD
@dp.message(Command("setdate"))
async def set_date(message: Message):
    global selected_date
    if message.from_user.id == YOUR_TELEGRAM_ID:
        try:
            new_date = message.text.split()[1]
            selected_date = new_date
            await message.answer(f"‚úÖ –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {selected_date}")
        except IndexError:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /setdate YYYY-MM-DD")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# üöç –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bus
@dp.message(Command("bus"))
async def send_bus_info(message: Message):
    if message.from_user.id == YOUR_TELEGRAM_ID:
        info = await get_bus_info()
        if info:
            await message.answer(info, parse_mode="Markdown")
        else:
            await message.answer("‚ùå –ë–∏–ª–µ—Ç–æ–≤ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É.")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")

# üö® –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
@dp.message(Command("stop"))
async def stop(message: Message):
    if message.from_user.id == YOUR_TELEGRAM_ID:
        global periodic_task
        if periodic_task is not None:
            periodic_task.cancel()
            periodic_task = None
            await message.answer("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        else:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    else:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

# üïí –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–ª–µ—Ç–æ–≤
async def periodic_request():
    while True:
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç  
        info = await get_bus_info()
        if info:
            await bot.send_message(YOUR_TELEGRAM_ID, info, parse_mode="Markdown")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    global periodic_task
    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
    periodic_task = asyncio.create_task(periodic_request())
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
